import re
  #password assmessment tool by Shaik Abbu Bakar Siddik
def assess_password_strength(password):
    # Criteria requried to create a strong password
    length_criteria = len(password) >= 8
    uppercase_criteria = re.search(r'[A-Z]', password) is not None
    lowercase_criteria = re.search(r'[a-z]', password) is not None
    number_criteria = re.search(r'[0-9]', password) is not None
    special_char_criteria = re.search(r'[!@#$%^&*(),.?":{}|<>]', password) is not None

    criteria_met = sum([length_criteria, uppercase_criteria, lowercase_criteria, number_criteria, special_char_criteria])
    
    # feedback providing based on the strength of a user inputted password 
    if criteria_met == 5:
        strength = 'Strong'
    elif 3 <= criteria_met < 5:
        strength = 'Moderate'
    else:
        strength = 'Weak'
    
    feedback = []
    if not length_criteria:
        feedback.append("Password should be at least 8 characters long.")
    if not uppercase_criteria:
        feedback.append("Password should contain at least one uppercase letter.")
    if not lowercase_criteria:
        feedback.append("Password should contain at least one lowercase letter.")
    if not number_criteria:
        feedback.append("Password should contain at least one number.")
    if not special_char_criteria:
        feedback.append("Password should contain at least one special character (e.g., !@#$%^&*()).")
    
    return {
        "strength": strength,
        "feedback": feedback
    }

#  taking  input from the user
password = input("Enter your password: ")
result = assess_password_strength(password)
print(f"Password Strength: {result['strength']}")
if result['feedback']:
    print("Feedback:")
    for item in result['feedback']:
        print(f"- {item}")
